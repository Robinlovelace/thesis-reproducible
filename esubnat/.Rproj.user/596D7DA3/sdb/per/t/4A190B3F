{
    "contents" : "#plotalll\nload(\"wards.RData\")\nlibrary(rgeos)\nload(\"wards.RData\")\nminiwards <- SpatialPolygonsDataFrame(Sr= gSimplify(wards, tol=5, topologyPreserve=T), data= wards@data)\nobject.size(miniwards) / object.size(wards) # only 0.83 in tol=800, 0.93 in tol=5\nplot(wards[grepl(\"00A\", wards$ZONE_CODE) ,], col=\"red\")\nplot(miniwards[grepl(\"00A\", wards$ZONE_CODE) ,], col=\"red\") \nhead(wards@data)\nla <- fortify(miniwards, region=\"ZONE_LABEL\") # 500,000 odd rows in tol=5 - minutes to run\n\nhead(la)\nwtrains <- grepl(\"moden.train.[0-9]\", names(wards), perl=T)\nnames(wards)\nnames(wards)[wtrains]\nhead(wards@data[wtrains])\nhead(wards@data)\nwards$ET.train <- rowSums(wards@data[wtrains])\nwards$id <- as.character(wards$ZONE_LABEL)\n\nla <- join(la, wards@data[c(\"id\", \"EAV\", \"ET\", \"ET.train\")], match=\"first\")\nhead(la)\n\nobject.size(la)/1000000\nnames(la) # 33 Mb for 400 tol\n# la <- la[c(1:8, 15, 16)]\nobject.size(la)/1000000 # 30 MB with tol=800 # 33 MB with tol=400\nsave(la, file=\"lamini.RData\")\nhead(la)\n\n### fromla.mini\nload(\"lamini.RData\")\nhead(la)\np <- ggplot(data=la, aes( x=long/1000, y=lat/1000))\np + geom_polygon(data=la,aes(x=long/1000, y=lat/1000, fill=EAV, group=group)) + \n  scale_fill_continuous(low=\"green\", high=\"red\", name=\"Etrp (MJ)\",\n                        limits=c(10,80)) + coord_fixed() +\n  xlab(\"Easting (km)\") + ylab(\"Northing (km)\") # looking good - finally plotted it all!\nggsave(\"engplotall-tol100.png\")\n### Add gors\nsetwd(\"../energy-nat/EN-Data/\") # navigate to the correct working directory\nlibrary(rgdal)\ngors <- readOGR(\".\", layer=\"GOR_st121\" ) # load the data!\ngors$abbed <- abbreviate(gors$ZONE_LABEL, minlength=2) # create abbreviated area names\ngors@data[1:5,c(\"ZONE_LABEL\", \"abbed\")] # check the abbreviation worked\nplot(gors) # results in a plot of England\ntext(coordinates(gors), labels=gors$abbed, col=\"red\") # add our region names: in the right place?\n\nfgor <- fortify(gors, region=\"ZONE_LABEL\")\nfgor <- merge(fgor, gors@data[,c(1,2,3,8,ncol(gors@data))], \n              by.x = \"id\", by.y=\"ZONE_LABEL\")\nhead(fgor)\ngortex <- coordinates(gors)/1000 \ngortex <- as.data.frame(cbind(gortex))\ngortex$V3 <- gors$abbed\nhead(gortex)\nclass(gortex$V1)\n\nggplot() + geom_polygon(data=la,aes(x=long/1000, y=lat/1000, fill=EAV, group=group)) + \n  scale_fill_continuous(low=\"green\", high=\"red\", name=\"Etrp (MJ)\",\n                        limits=c(10,80)) + coord_fixed() +\n  xlab(\"Easting (km)\") + ylab(\"Northing (km)\") + # looking good - finally plotted it all!\n  geom_path(data=fgor,aes(x=long/1000, y=lat/1000,group=group)) +\n  geom_text(data=gortex, aes(x=V1, y=V2, label=V3), colour=\"blue\")\n\nggsave(\"engplot-compare.png\", width=8, height = 8)\n\n## Add cities\nlibrary(maps)\ndata(world.cities)\nplot(world.cities$long, world.cities$lat)\nhead(world.cities)\nUKcs <- (world.cities[world.cities$country.etc == \"UK\",])\nplot(UKcs$long, UKcs$lat)\nUKcs <- UKcs[UKcs$pop > 100000,]\nUKcs <- SpatialPointsDataFrame(coords=UKcs[,c(\"long\", \"lat\")], proj4string=CRS(\"+init=epsg:4326\" ), \n                              data=UKcs)\nplot(UKcs)\nhead(coordinates(UKcs))\nproj4string(UKcs)\nplot(gors)\ncoordinates(gors)\npoints(UKcs)\nUKcssp <- spTransform(x=UKcs, CRS(\"+init=epsg:27700\")) # sloppy typing error...\nhead(coordinates(UKcssp))\nplot((UKcssp))\nplot(gors) ; points(UKcssp)\n\nUKcssp$pname <- NA\nUKcssp$pname[UKcs@data$pop > 200000] <- UKcssp$name[UKcs@data$pop > 200000]\nhead(UKcssp@data)\nUKcssp$paname <- abbreviate(UKcssp$pname, minlength=3)\ntext(coordinates(UKcssp), labels=UKcssp$paname)\n# remove extraneous points\nUKcssp <- UKcssp[!UKcssp$lat > 600000,]\nexcludeme <- grepl(\"Belf|Cardi|Swanse|Newpor\", UKcssp$name)\nplot(UKcssp)\nUKcssp <- UKcssp[!excludeme,]\nplot(UKcssp)\n\nggplot() + geom_polygon(data=la,aes(x=long/1000, y=lat/1000, fill=EAV, group=group)) + \n  scale_fill_continuous(low=\"green\", high=\"red\", name=\"Etrp (MJ)\",\n                        limits=c(10,80)) + coord_equal() +  #coord_map() +\n  xlab(\"Easting (km)\") + ylab(\"Northing (km)\") + # looking good - finally plotted it all!\n  geom_path(data=fgor,aes(x=long/1000, y=lat/1000,group=group)) +\n  geom_text(data=gortex, aes(x=V1, y=V2, label=V3), colour=\"blue\") +\n  geom_point(aes(x=coordinates(UKcssp)[,1]/1000, y=coordinates(UKcssp)[,2]/1000)) +\n  # geom_text(aes(x=coordinates(UKcssp)[,1]/1000, y=coordinates(UKcssp)[,2]/1000, label=UKcssp$paname )) +\n  xlim(bbox(wards)[1,]/1000) + ylim(bbox(wards)[2,]/1000)\n\nggsave(\"~/Dropbox/Thesis/Figures/engplotnm.png\", width=8, height = 8)\n\nplot(wards[which.min(wards$EAV),])\nwards[which.max(wards$EAV),]\n1451/2139\n\n\n### Plot for trains\nload(\"lamini.RData\") ## 1 million-odd\nload(\"wards.RData\")\nobject.size(wards)\nhead(wards@data)\n\nwtrains <- grepl(\"moden.train.[0-9]\", names(wards), perl=T)\nnames(wards)\nnames(wards)[wtrains]\nhead(wards@data[wtrains])\nhead(wards@data)\nwards$ET.train <- rowSums(wards@data[wtrains])\nwards$id <- as.character(wards$ZONE_LABEL)\nlibrary(plyr)\nwards2 <- wards@data[,c(\"id\", \"ET.train\", \"all.all\", \"ET\", \"EAV\")]\nstr(la)\n?join\nla <- join(la, wards2, by=\"id\", match=\"first\")\n# la <- merge(la, wards@data[,c(\"id\", \"ET.train\", \"all.all\")])\nhead(la)\nla$Train.energy.use <- la$ET.train / la$ET * 100\nla$ET.trainqs <- cut(la$ET.train/1000, breaks= quantile(la$ET.train/1000, na.rm=T))\nlevels(la$ET.trainqs) <- paste(\"q\",1:4, sep=\"\")\n\nengout <- readOGR(\"/home/robin/Data/Nationaltravel/Just-england/\", \"England_boundary\")\nrails <- readOGR(\"/home/robin/gis-data/Strategicvectordata/gb_south-20091211/\", \"railway_polyline\")\nrailn <- readOGR(\"/home/robin/gis-data/Strategicvectordata/north/\", \"railway_polyline\")\ngI <- gIntersects(railn, engout, byid=T)\nrailn <- railn[which(gI),]\n# plot(railn[which(gI),])\ngI <- gIntersects(rails, engout, byid=T)\nrails <- rails[which(gI),]\nrfn <- fortify(railn)\nrfs <- fortify(rails)\nsummary(la$Train.energy.use)\nfengout <- fortify(engout)\n\nggplot() + geom_polygon(data=la[which(la$Train.energy.use > 3),],\n                        aes(x=long/1000, y=lat/1000, fill=Train.energy.use, group=group)) + \n  scale_fill_continuous(low=\"green\", high=\"red\", name = \"% energy \\n use by train\") + coord_equal() +  #coord_map() +\n  xlab(\"Easting (km)\") + ylab(\"Northing (km)\") + # looking good - finally plotted it all!\n#   geom_path(data=fgor,aes(x=long/1000, y=lat/1000,group=group)) +\n#   geom_text(data=gortex, aes(x=V1, y=V2, label=V3), colour=\"blue\") +\n#   geom_point(aes(x=coordinates(UKcssp)[,1]/1000, y=coordinates(UKcssp)[,2]/1000)) +\n#   geom_text(aes(x=coordinates(UKcssp)[,1]/1000, y=coordinates(UKcssp)[,2]/1000, label=UKcssp$paname )) +\n  geom_path(data=rfn, aes(x=long/1000, y=lat/1000,group=group)) +\n  geom_path(data=rfs, aes(x=long/1000, y=lat/1000,group=group)) +\n  geom_path(data=fengout,aes(x=long/1000, y=lat/1000, group=group)) +\n  xlim(bbox(wards)[1,]/1000) + ylim(bbox(wards)[2,]/1000)   +\n  theme_classic()+\n  theme(legend.position = c(0.2,0.6))\n\nggsave(\"~/Dropbox/Thesis/Figures/trainen.png\", , width=8, height = 8)\n\n\n\n\n",
    "created" : 1374837543312.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2709049886",
    "id" : "4A190B3F",
    "lastKnownWriteTime" : 1374846564,
    "path" : "~/Dropbox/Thesis/Reproducible/esubnat/plotall.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}